FROM node:23.6.0-alpine AS base

FROM base AS prune
RUN apk update
RUN apk add --no-cache libc6-compat

WORKDIR /app
RUN npm i -g turbo
COPY . .
RUN npx turbo prune web --docker

# -----------------installer stage--------------------------------------------------------------------------
FROM base AS installer
RUN apk update
RUN apk add --no-cache libc6-compat
RUN npm i -g pnpm
WORKDIR /app

COPY --from=prune /app/out/json/ .

RUN pnpm install


# -----------------prod installer stage--------------------------------------------------------------------------
    FROM base AS installer-production
    RUN apk update
    RUN apk add --no-cache libc6-compat
    RUN npm i -g pnpm
    WORKDIR /app
    
    COPY --from=prune /app/out/json/ .
    
    RUN pnpm install --only=production

# -----------------builder stage--------------------------------------------------------------------------
FROM base AS builder

ARG DB_URL
ENV DATABASE_URL=${DB_URL}

RUN npm i -g pnpm
WORKDIR /app

COPY --from=prune /app/out/full/ .
COPY --from=installer /app/node_modules /app/node_modules
COPY --from=installer /app/packages/db/node_modules /app/packages/db/node_modules
RUN  pnpm run db:generate
RUN pnpm install
RUN cd /app/apps/web && DATABASE_URL=${DB_URL} pnpm run build

# ------------------runner stage-------------------------------------------------------------------------
FROM base AS runner

WORKDIR /app
RUN npm i -g pnpm

# copies prod build dependencies i.e nodemodules with prod dependencies


COPY --from=builder     /app/apps/web/.next/standalone      ./
COPY --from=builder     /app/apps/web/public                ./public
COPY --from=builder     /app/apps/web/.next/static          ./.next/static
 

WORKDIR /app/apps/web

EXPOSE 3000

CMD [ "node", "server.js" ]