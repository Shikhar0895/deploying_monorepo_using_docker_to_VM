FROM node:23.6.0-alpine AS base

FROM base AS prune
RUN apk update
RUN apk add --no-cache libc6-compat

WORKDIR /app
RUN npm i -g turbo
COPY ../ .
RUN turbo prune http-server --docker

# -------------------------------------------------------------------------------------------------#
FROM base AS installer
RUN apk update
RUN apk add --no-cache libc6-compat
RUN npm i -g pnpm
WORKDIR /app
COPY --from=prune /app/out/json/ .

RUN pnpm install

# -------------------------------------------------------------------------------------------------#

# This Step only installs Production dependencies only
FROM base AS installer-production
RUN apk update
RUN apk add --no-cache libc6-compat
RUN npm i -g pnpm
WORKDIR /app
# the /out/json contain the package.json file that is used to install packages related to the "web" 
COPY --from=prune /app/out/json/ .


RUN pnpm install --only=production

# -------------------------------------------------------------------------------------------------#

# Uses the dev & production dependencies to make a production build
FROM base AS builder
RUN npm i -g pnpm
WORKDIR /app
COPY --from=prune /app/out/full/ .
COPY --from=installer /app/node_modules /app/node_modules
COPY --from=installer /app/apps/http-server/node_modules /app/apps/http-server/node_modules
COPY --from=installer /app/packages/  /app/packages/
# the /out/full contain the code files that is used to run the package "web" 
COPY  ./turbo.json .
RUN pnpm dlx turbo build --filter=http-server

# -------------------------------------------------------------------------------------------------#

FROM base AS runner

ENV DATABASE_URL=${DATABASE_URL}
ENV PORT=${PORT}
WORKDIR /app

COPY --from=installer-production   /app/node_modules /app/node_modules
COPY --from=installer-production   /app/apps/http-server/node_modules /app/apps/http-server/node_modules
# copies prod build dependencies i.e nodemodules with prod dependencies
COPY --from=prune                  /app/out/full/packages/db/ /app/packages/db  
COPY --from=installer-production   /app/packages/db/node_modules /app/packages/db/node_modules
COPY --from=builder                /app/apps/http-server/dist /app/apps/http-server/dist
COPY ./package.json ./package.json


RUN cd ./packages/db && DATABASE_URL=${DATABASE_URL} npx prisma generate
RUN npm i -g pnpm@latest

EXPOSE 8000

CMD [ "pnpm", "run", "start:http"]

 
# -------------------------------------------------------------------------------------------------#

